<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Aldevar - Le Blog - web</title><link href="https://blog.devarieux.net/" rel="alternate"></link><link href="https://blog.devarieux.net/feed/web.atom.xml" rel="self"></link><id>https://blog.devarieux.net/</id><updated>2021-02-21T00:23:00+01:00</updated><subtitle>Yet Another Blog</subtitle><entry><title>Pilotage de Caddy par API</title><link href="https://blog.devarieux.net/2021/02/caddy-api.html" rel="alternate"></link><published>2021-02-21T00:23:00+01:00</published><updated>2021-02-21T00:23:00+01:00</updated><author><name>Aldevar</name></author><id>tag:blog.devarieux.net,2021-02-21:/2021/02/caddy-api.html</id><summary type="html">&lt;p&gt;Comme promis dans l'article précédent sur Caddy, je vais parler de l'utilisation de l'API de Caddy. Un prochain article décrira comment générer un certificat wildcard pour un domaine hébergé chez OVH.&lt;/p&gt;
&lt;p&gt;En plus de permettre de lire la configuration, l'API de Caddy permet aussi d'en pousser une nouvelle, en totalité …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Comme promis dans l'article précédent sur Caddy, je vais parler de l'utilisation de l'API de Caddy. Un prochain article décrira comment générer un certificat wildcard pour un domaine hébergé chez OVH.&lt;/p&gt;
&lt;p&gt;En plus de permettre de lire la configuration, l'API de Caddy permet aussi d'en pousser une nouvelle, en totalité ou en partie. L'avantage est que, si la configuration envoyée est valide, celle ci est chargée à chaud et sinon un code retour autre que 200 est renvoyé, précisant l'erreur rencontrée.&lt;/p&gt;
&lt;p&gt;Attention au mode d'execution du service Caddy lorsqu'on commence à le configurer par API. Il est nécessaire d'utiliser le fichier de service décrit &lt;a class="reference external" href="https://caddyserver.com/docs/install#linux-service"&gt;dans la documentation&lt;/a&gt;. Sans cela, les modifications apportées seront perdues au prochain redémarrage du service.&lt;/p&gt;
&lt;p&gt;L'API est disponible par defaut seulement sur la boucle locale, port 2019. On peut déjà commencer par visualiser la configuration avant de commencer à en pousser une nouvelle.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:2019/config/ | python3 -m json.tool
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le pipe vers la commande python permet d'obtenir directement un affichage json en mode pretty print.&lt;/p&gt;
&lt;div class="section" id="pousser-une-configuration-complete"&gt;
&lt;h2&gt;Pousser une configuration complète&lt;/h2&gt;
&lt;p&gt;La configuration à envoyer vers Caddy est préparée dans un fichier, qu'on va appeler &lt;code&gt;config.json&lt;/code&gt;. Ce fichier sera ensuite envoyé en tant que payload dans l'appel API.&lt;/p&gt;
&lt;p&gt;Première configuration simple avec un reverse proxy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;apps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;servers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;srv0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;routes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;handle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;quot;handler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reverse_proxy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;quot;upstreams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                                    &lt;span class="p"&gt;{&lt;/span&gt;
                                        &lt;span class="nt"&gt;&amp;quot;dial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.0.0.1:80&amp;quot;&lt;/span&gt;
                                    &lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="p"&gt;]&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avec cette configuration, on a la génération du certificat TLS via Let's Encrypt ainsi que la redirection HTTP vers HTTPS. On pousse cette configuration avec la commande suivante :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl 127.0.0.1:2019/load -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @config.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Passons maintenant à l'étape suivante. Nous allons ajouter plusieurs éléments de configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1:2019&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;apps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;servers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;srv0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;:443&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;routes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;handle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;quot;handler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reverse_proxy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;quot;transport&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                    &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="nt"&gt;&amp;quot;tls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
                                &lt;span class="p"&gt;},&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;quot;upstreams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                                    &lt;span class="p"&gt;{&lt;/span&gt;
                                        &lt;span class="nt"&gt;&amp;quot;dial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.0.0.1:443&amp;quot;&lt;/span&gt;
                                    &lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="p"&gt;]&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="nt"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                                    &lt;span class="s2"&gt;&amp;quot;sub.domain.com&amp;quot;&lt;/span&gt;
                                &lt;span class="p"&gt;]&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;

                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;tls_connection_policies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;certificate_selection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;quot;any_tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;companycert&amp;quot;&lt;/span&gt;
                            &lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;tls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;certificates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;load_files&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;certificate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/pki/tls/certs/companycert.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/pki/tls/private/companycert.key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="s2"&gt;&amp;quot;companycert&amp;quot;&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Qu'avons nous exactement?
Premièrement, nous créons une route qui utilise un handle. Un handle est un processus de Caddy qui permet d'activer certaines fonctionnalités spécifiques. Ici nous utilisons le handle &lt;code&gt;reverse_proxy&lt;/code&gt; mais il y en a &lt;a class="reference external" href="https://caddyserver.com/docs/json/apps/http/servers/routes/handle/"&gt;bien d'autres&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ensuite, avec la directive &lt;code&gt;&amp;quot;upstream&amp;quot; &amp;quot;dial&amp;quot;&lt;/code&gt;, on spécifie le serveur de backend à utiliser. En précisant &lt;code&gt;:443&lt;/code&gt;, on force le reverse proxy à se connecter au backend en HTTPS.&lt;/p&gt;
&lt;p&gt;Puis la directive &lt;code&gt;&amp;quot;match&amp;quot; &amp;quot;host&amp;quot;&lt;/code&gt; permet de répondre aux requêtes destinées à &lt;code&gt;sub.domain.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On termine enfin avec la configuration TLS. D'une part, on indique la politique TLS du serveur &amp;quot;srv0&amp;quot;. La possibilitée d'utiliser des tags est assez pratique pour ne pas avoir à répéter les chemins des certificats lorsqu'on utilise plusieurs éléments &amp;quot;server&amp;quot; dans la même configuration. Il est même possible de spécifier plusieurs tags, correspondant à plusieurs certificats. Caddy choisira le certificat le plus adapté au SNI de destination.&lt;/p&gt;
&lt;p&gt;De la même façon, on pousse la configuration complète vers Caddy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl 127.0.0.1:2019/load -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d @config.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mettre-a-jour-une-partie-de-la-configuration"&gt;
&lt;h2&gt;Mettre à jour une partie de la configuration&lt;/h2&gt;
&lt;p&gt;Pour mettre à jour ou remplacer une partie de la configuration, on va utiliser le chemin JSON qu'on souhaite mettre à jour et changer de verbe HTTP.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;POST /config/[chemin]&lt;/dt&gt;
&lt;dd&gt;Configure ou remplace un objet. Si l'objet est une liste, l'élément est ajouté à la liste.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Voici par exemple comment ajouter l'écoute sur le port 80, ce qui désactive la redirection automatique de HTTP vers HTTPS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;#39;&amp;quot;:80&amp;quot;&amp;#39; &amp;quot;http://127.0.0.1:2019/config/apps/http/servers/srv0/listen&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;PUT /config/[chemin]&lt;/dt&gt;
&lt;dd&gt;Créé un nouvel objet. Insert dans un liste&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Pour continuer sur l'exemple du port d'écoute, on peut ajouter le port d'écoute 80 de cette façon :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;#39;&amp;quot;:80&amp;quot;&amp;#39; &amp;quot;http://127.0.0.1:2019/config/apps/http/servers/srv0/listen/0&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;PATCH /config/[chemin]&lt;/dt&gt;
&lt;dd&gt;Remplace un objet ou une liste&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Dison qu'on souhaite remettre en place la redirection du port 80 vers 443. Cela est automatique lorsqu'on demande à Caddy d'écouter seulement sur le port 443. Cette commande va remplacer la liste &lt;code&gt;[&amp;quot;:80&amp;quot;, &amp;quot;:443&amp;quot;]&lt;/code&gt; par simplement &lt;code&gt;[&amp;quot;:443&amp;quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -X PATCH -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;#39;&amp;quot;:443&amp;quot;&amp;#39; &amp;quot;http://127.0.0.1:2019/config/apps/http/servers/srv0/listen/&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voilà pour un tour rapide de l'utilisation de l'API de Caddy. Dans un prochain article j'expliquerai comment compiler Caddy avec des plugins et comment générer un certificat wildcard pour un domaine hébergé chez OVH, en remplissant le challenge DNS proposé par Let's Encrypt.&lt;/p&gt;
&lt;/div&gt;
</content><category term="web"></category><category term="caddy"></category><category term="web"></category><category term="automatisation"></category></entry><entry><title>Présentation de Caddy</title><link href="https://blog.devarieux.net/2021/02/caddy-presentation.html" rel="alternate"></link><published>2021-02-19T06:55:00+01:00</published><updated>2021-02-19T06:55:00+01:00</updated><author><name>Aldevar</name></author><id>tag:blog.devarieux.net,2021-02-19:/2021/02/caddy-presentation.html</id><summary type="html">&lt;p&gt;Dans un tweet récent, j'expliquais voir trop peu de publications d'articles sur le serveur web / reverse proxy &lt;a class="reference external" href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt;. Je pense que Caddy gagne a être connu, voici donc un premier article de présentation.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="fr" dir="ltr"&gt;Je vois pas mal de partage d&amp;#39;articles sur Traefik dans mon fil Twitter. J&amp;#39;aime beaucoup …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Dans un tweet récent, j'expliquais voir trop peu de publications d'articles sur le serveur web / reverse proxy &lt;a class="reference external" href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt;. Je pense que Caddy gagne a être connu, voici donc un premier article de présentation.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-partner="tweetdeck"&gt;&lt;p lang="fr" dir="ltr"&gt;Je vois pas mal de partage d&amp;#39;articles sur Traefik dans mon fil Twitter. J&amp;#39;aime beaucoup Traefik mais je lui préfère &lt;a href="https://twitter.com/caddyserver?ref_src=twsrc%5Etfw"&gt;@caddyserver&lt;/a&gt;.&lt;br&gt;Je profite donc de la reprise des activités sur mon blog pour vous préparer quelques articles sur Caddy et l&amp;#39;utilisation de son API.&lt;/p&gt;&amp;mdash; Alain Devarieux (@landvarx) &lt;a href="https://twitter.com/landvarx/status/1362078709436592130?ref_src=twsrc%5Etfw"&gt;February 17, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;Caddy est un serveur web, de même que Apache ou Nginx. Il dispose également d'une fonctionnalité de reverse proxy et utilise des options de sécurités avancées par défaut (HTTPS par défaut avec Let's Encrypt ou ZeroSSL, TLS 1.3, OCSP Stapling, Cipher Suite modernes). Le logiciel est écrit en Go.
En plus de ces fonctionnalités de sécurités, Caddy est multiplateforme, il fonctionne avec un seul binaire, supporte les plugins et supporte plusieurs types de challenges ACME.&lt;/p&gt;
&lt;p&gt;Je ne vais pas revenir sur son installation, parfaitement décrite dans &lt;a class="reference external" href="https://caddyserver.com/docs/install"&gt;la documentation&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Caddy peut se configurer de deux manières. Via le fichier de configuration, appelé &lt;code&gt;Caddyfile&lt;/code&gt; ou via son API avec un payload JSON. L'utilisation de l'API sera décrite dans un prochain article.
J'utilise Caddy principalement pour ses fonctionnalités de reverse proxy. Voyons donc quelques exemples de configuration de Caddy via le Caddyfile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sub.domain.com {
    reverse_proxy 10.0.0.1:8000
    log {
        output file /var/log/caddy/sub.domain.com_access.log
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bien, avec ça, nous avons un reverse proxy qui écoute sur le port 80 et 443, avec redirection automatique HTTP vers HTTPS. Les logs seront renvoyés vers un fichier. Avec cette configuration, le certificat Let's Encrypt est généré (si le DNS est bien configuré et que Caddy est accessible depuis l'exterieur) et seuls les protocoles TLS 1.2 et 1.3 sont supportés. Niveau sécurité, on est pas mal.&lt;/p&gt;
&lt;p&gt;De la même façon, le header &lt;code&gt;X-Forwarded-For&lt;/code&gt; est automatiquement intégré dans l'entête HTTP envoyé au serveur de backend. Cette intégration permet de gagner quelques lignes de configuration.
Voyons maintenant comment gérer l'utilisation de deux backends différents pour des URI différentes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sub.domain.com {
reverse_proxy /api/v1/* 10.0.0.2:4000
reverse_proxy / 10.0.0.1:3000

log {
        output file /var/log/caddy/sub.domain.com_access.log {
                roll_size 10MiB
                roll_keep 10
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Là encore, c'est assez simple. On traite d'abord les requêtes vers &lt;code&gt;/api/v1&lt;/code&gt; qui sont envoyées vers un premier backend et le reste des requêtes est envoyé vers &lt;code&gt;10.0.0.1&lt;/code&gt;. J'en ai profité pour ajouter une rotation des logs.&lt;/p&gt;
&lt;p&gt;Tout cela fonctionne bien quand on a un site disponible publiquement et pour lequel Caddy peut générer un certificat Let's Encrypt. Voyons maintenant comment intégrer son propre certificat (autosigné ou non). Pour cet exemple, je m'appuie sur une configuration de Caddy pour servir un serveur Graylog&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;logs.domain.com {
        reverse_proxy 127.0.0.1:9000
        header X-Graylog-Server-URL https://logs.domain.com/
        tls /etc/pki/tls/certs/companycert.crt /etc/pki/tls/private/companycert.key
log {
        output file /var/log/caddy/graylog.log {
                roll_size 10MiB
                roll_keep 10
                }
        }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;L'option &lt;code&gt;tls&lt;/code&gt; permet de passer directement le certificat puis la clé privée du certificat. L'ajout d'un header se fait de façon assez simple ici aussi.&lt;/p&gt;
&lt;p&gt;Enfin, comment faire lorsqu'on souhaite servir son site en plain HTTP, sans TLS. L'option est assez simple et plutot ingénieuse. Il suffit de forcer le site en HTTP dans l'URL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://sub.domain.com {
    reverse_proxy 10.0.0.1:8000
    log {
        output file /var/log/caddy/sub.domain.com_access.log
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avec cette configuration, Caddy ne va pas tenter de générer le certificat Let's Encrypt ni proposer de redirection HTTP vers HTTPS.&lt;/p&gt;
&lt;p&gt;Dans le prochain article nous verrons comment utiliser l'API de Caddy en lecture et en écriture totale ou partielle de configuration.&lt;/p&gt;
&lt;/div&gt;
</content><category term="web"></category><category term="caddy"></category><category term="web"></category></entry><entry><title>Accéder en webdav à son fichier Keepass</title><link href="https://blog.devarieux.net/2014/09/acceder-en-webdav-a-son-fichier-keepass.html" rel="alternate"></link><published>2014-09-05T22:54:00+02:00</published><updated>2014-09-05T22:54:00+02:00</updated><author><name>alain</name></author><id>tag:blog.devarieux.net,2014-09-05:/2014/09/acceder-en-webdav-a-son-fichier-keepass.html</id><summary type="html">&lt;p&gt;Keepass est un gestionnaire de mot de passe que j'utilise
personnellement et professionnellement. Il permet notamment de partager
un coffre fort entre plusieurs personne en offrant un support pour ftp
et http/webdav. Certains plugins ajoutent le support sftp et ftps.&lt;/p&gt;
&lt;p&gt;Sur CentOS, apache est livré avec le module webdav …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Keepass est un gestionnaire de mot de passe que j'utilise
personnellement et professionnellement. Il permet notamment de partager
un coffre fort entre plusieurs personne en offrant un support pour ftp
et http/webdav. Certains plugins ajoutent le support sftp et ftps.&lt;/p&gt;
&lt;p&gt;Sur CentOS, apache est livré avec le module webdav. Ce n'est pas
forcement le cas de toutes les distributions.&lt;/p&gt;
&lt;p&gt;La configuration utilisée est la suivante :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Un sous domaine créé pour contenir le fichier kdbx&lt;/li&gt;
&lt;li&gt;une protection par mot de passe pour l'accès au fichier en lui même
(anciennement .htaccess)&lt;/li&gt;
&lt;li&gt;L'autorisation d'accéder au sous domaine en webdav&lt;/li&gt;
&lt;li&gt;Et enfin, un mot de passe &lt;strong&gt;ultra solide&lt;/strong&gt; pour le fichier kdbx qui
peut contenir des données sensibles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dans mon cas, j'ai utilisé un sous domaine du type keepass.domain.tld et
le fichier est stocké en local sur le serveur sous /var/www/keepass/&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root# mkdir /var/www/keepass
root# chown apache. /var/www/keepass
root# chmod 770 /var/www/keepass
root# vim /etc/httpd/conf.d/keepass.conf
&lt;/pre&gt;
&lt;p&gt;Pour ne pas que le mot de passe passe en clair sur le net, nous allons
forcer l'utilisation de https&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;VirtualHost *:80&amp;gt;
 ServerName keepass.domain.tld
 ServerAdmin admin&amp;#64;domain.tld
 Redirect permanent / https://keepass.domain.tld/
 ErrorLog /var/log/httpd/keepass.err
 CustomLog /var/log/httpd/keepass.log combined
 DocumentRoot /var/www/keepass
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:443&amp;gt;
 SSLEngine on
 SSLCertificateFile /etc/pki/tls/certs/ca.crt
 SSLCertificateKeyFile /etc/pki/tls/private/ca.key
 ServerName keepass.domain.tld
 ServerAdmin admin&amp;#64;domain.tld
 ErrorLog /var/log/httpd/keepass.err
 CustomLog /var/log/httpd/keepass.log combined
 DocumentRoot /var/www/keepass
&amp;lt;Directory &amp;quot;/var/www/keepass&amp;quot;&amp;gt;
 DAV On
 SSLRequireSSL
 Options None
 AuthType Basic
 AuthName WebDAV
 AuthUserFile /etc/httpd/conf/.htpasswd
 &amp;lt;LimitExcept GET OPTIONS&amp;gt;
 Order allow,deny
 Allow from X.X.X.X #IP que vous autorisez, 'all' pour tout le monde
 Require valid-user
 &amp;lt;/LimitExcept&amp;gt;
&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Voici les étapes pour la création du fichier .htpasswd&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root# htpasswd -c /etc/httpd/conf/.htpasswd NomUtilisateur
root# /etc/init.d/httpd restart
&lt;/pre&gt;
&lt;p&gt;Il ne reste plus qu'à placer le fichier kdbx dans /var/www/keepass et
donner à apache les droits en écriture sur ce fichier.&lt;/p&gt;
&lt;p&gt;Enfin, dans Keepass en ouvrant une url, le logiciel demande de fournir
l'URL et si besoin un couple login/mdp.&lt;/p&gt;
&lt;p&gt;L'URL sera de type &lt;a class="reference external" href="https://keepass.domain.tld/fichier.kdbx"&gt;https://keepass.domain.tld/fichier.kdbx&lt;/a&gt; et le couple
login/mdp est celui créé lors de l’exécution de la commande htpasswd&lt;/p&gt;
</content><category term="web"></category><category term="apache"></category><category term="centos"></category><category term="keepass"></category><category term="ssl"></category><category term="webdav"></category></entry></feed>